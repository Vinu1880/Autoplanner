// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String
  lastName      String
  phone         String?
  role          String?
  workPercent   Int         @default(100)
  status        UserStatus  @default(ACTIVE)
  notes         String?
  
  // NOUVEAUX CHAMPS pour la rotation et disponibilité
  rotationConfig Json?      // Stocke la configuration de rotation
  availability   Json?      // Stocke les disponibilités hebdomadaires
  
  teamId        String?
  team          Team?       @relation("TeamMembers", fields: [teamId], references: [id])
  leadingTeam   Team?       @relation("TeamLead")
  
  assignments   ShiftAssignment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([email])
  @@index([teamId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  
  leadId      String?  @unique
  lead        User?    @relation("TeamLead", fields: [leadId], references: [id])
  members     User[]   @relation("TeamMembers")
  shifts      Shift[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([name])
}

model Shift {
  id             String   @id @default(cuid())
  name           String
  description    String?
  startTime      String   // Format HH:MM
  endTime        String   // Format HH:MM
  membersRequired Int     @default(1)
  priority       Priority @default(MEDIUM)
  status         Status   @default(ACTIVE)
  color          String   @default("#3b82f6")
  
  // Listes d'IDs pour inclusion/exclusion
  includedUserIds String[]
  excludedUserIds String[]
  
  teamId         String
  team           Team     @relation(fields: [teamId], references: [id])
  
  assignments    ShiftAssignment[]
  usageCount     Int      @default(0)
  lastUsedAt     DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([teamId])
  @@index([status])
}

model ShiftAssignment {
  id          String           @id @default(cuid())
  date        DateTime
  status      AssignmentStatus @default(PENDING)
  reason      String?
  respondedAt DateTime?
  
  shiftId     String
  shift       Shift            @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([date, shiftId, userId])
  @@index([userId])
  @@index([shiftId])
  @@index([date])
  @@index([status])
}

model OutOfOfficeEvent {
  id           String   @id @default(cuid())
  userEmail    String
  subject      String
  startDate    DateTime
  endDate      DateTime
  isAllDay     Boolean  @default(false)
  outlookId    String?  @unique
  calendarName String?
  syncedAt     DateTime @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userEmail])
  @@index([startDate, endDate])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  data      Json?
  createdAt DateTime @default(now())
  
  @@index([entity])
  @@index([userId])
  @@index([createdAt])
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  REFUSED
  CANCELLED
}